.TH "/Users/andrew/Documents/Andy/programming/libgencurvefit/src/levenbergMarquardt.c" 3 "Mon Sep 13 2010" "libgencurvefit" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/Users/andrew/Documents/Andy/programming/libgencurvefit/src/levenbergMarquardt.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include 'gencurvefit.h'\fP
.br
\fC#include 'math.h'\fP
.br
\fC#include 'stdlib.h'\fP
.br
\fC#include 'string.h'\fP
.br

.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBTINY\fP   1.0e-20"
.br
.ti -1c
.RI "#define \fBEPSILON\fP   1.0e-6"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBmatrixInversion_lu\fP (double **a, int N)"
.br
.ti -1c
.RI "void \fBcalculateAlphaElement\fP (int row, int col, double **alpha, double **derivativeMatrix, const double *edata, long datapoints, double lambda)"
.br
.ti -1c
.RI "void \fBpackAlphaSymmetric\fP (double **alpha, unsigned int numvarparams)"
.br
.ti -1c
.RI "void \fBupdateAlpha\fP (double **alpha, double **derivativeMatrix, unsigned int numvarparams, const double *edata, long datapoints, double lambda)"
.br
.ti -1c
.RI "double \fBcalculateBetaElement\fP (double **derivativeMatrix, int row, const double *ydata, const double *model, const double *edata, long datapoints)"
.br
.ti -1c
.RI "void \fBupdateBeta\fP (double *b, double **derivativeMatrix, int numvarparams, const double *ydata, const double *model, const double *edata, long datapoints)"
.br
.ti -1c
.RI "int \fBgetCovarianceMatrix\fP (double **covarianceMatrix, void *userdata, \fBfitfunction\fP fitfun, double cost, double *coefs, int numcoefs, unsigned int *holdvector, const double *ydata, const double *edata, const double **xdata, long datapoints, int numDataDims, int unitSD)"
.br
.ti -1c
.RI "int \fBlevenberg_marquardt\fP (\fBfitfunction\fP fitfun, \fBcostfunction\fP costfun, unsigned int numcoefs, double *coefs, const unsigned int *holdvector, long datapoints, const double *ydata, const double **xdata, const double *edata, unsigned int numDataDims, double *chi2, const \fBgencurvefitOptions\fP *gco, void *userdata)"
.br
.in -1c
.SH "Define Documentation"
.PP 
.SS "#define EPSILON   1.0e-6"
.SS "#define TINY   1.0e-20"
.SH "Function Documentation"
.PP 
.SS "void calculateAlphaElement (int row, int col, double ** alpha, double ** derivativeMatrix, const double * edata, long datapoints, double lambda)"
.SS "double calculateBetaElement (double ** derivativeMatrix, int row, const double * ydata, const double * model, const double * edata, long datapoints)"\fBReturns:\fP
.RS 4
An calculated element for the beta-matrix. NOTE: Does not change the value of beta-matrix. 
.RE
.PP

.SS "int getCovarianceMatrix (double ** covarianceMatrix, void * userdata, \fBfitfunction\fP fitfun, double cost, double * coefs, int numcoefs, unsigned int * holdvector, const double * ydata, const double * edata, const double ** xdata, long datapoints, int numDataDims, int unitSD)"in \fBlevenbergMarquardt.c\fP. Calculates a hessian gradient matrix based covariance matrix. The covariance matrix is returned via the covarianceMatrix pointer and must be freed afterwards.
.PP
\fBParameters:\fP
.RS 4
\fIcovarianceMatrix\fP - the covariance matrix is returned in this array. It must be free'd afterwards.
.br
\fIuserdata\fP - pass in user specific information to the fitfunction with this pointer.
.br
\fIfitfun\fP - your fitfunction
.br
\fIcost\fP - the value of the cost function for the parameters specified
.br
\fIcoefs[numcoefs]\fP - an array containing the coefficients. The covariance matrix is assessed for these values
.br
\fInumcoefs\fP - the number of coefficients
.br
\fIholdvector[numcoefs]\fP - an array specifying which parameters were held (=1) or varied (=0) during the fit
.br
\fIydata[datapoints]\fP - an array of the data being fitting
.br
\fIedata[datapoints]\fP - an array for the error bars for the data being fitted.
.br
\fIdatapoints\fP - the number of datapoints being fitted
.br
\fIxdata[numDataDims][datapoints]\fP - an array containing the independent variables for the fit
.br
\fInumDataDims\fP - how many independent variables do you have?
.br
\fIunitSD\fP - specify as 1 if the datapoints were unit weighted. 
.RE
.PP

.SS "int levenberg_marquardt (\fBfitfunction\fP fitfun, \fBcostfunction\fP costfun, unsigned int numcoefs, double * coefs, const unsigned int * holdvector, long datapoints, const double * ydata, const double ** xdata, const double * edata, unsigned int numDataDims, double * chi2, const \fBgencurvefitOptions\fP * gco, void * userdata)"does a levenberg marquardt fit to the data, instead of differential evolution. It returns a non-zero error code if something goes wrong. However, it will also stop if your fitfunction returns a non-zero value. As with genetic optimisation you can supply your own cost function.
.PP
\fBParameters:\fP
.RS 4
\fIfitfun\fP - a function that calculates the dependent variable, given input parameters and independent variables. If you return a non-zero value from this function the fit will stop.
.br
\fIcostfun\fP - a function that calculates the costfunction to be minimised. This is normally a chi2 type function. i.e. sum (((model[i] - data[i]) / dataerrors[i])^2 ) If costfun == NULL then a default chi2 function is used.
.br
\fInumcoefs\fP - total number of fit parameters.
.br
\fIcoefs[numcoefs]\fP - an array containing all the parameters for the fit. After genetic_optimisation this is populated by the parameters that best fit the data.
.br
\fIholdvector[numcoefs]\fP - an array (with numcoefs elements) that specifies which parameters are going to be held during the fit. 0 = vary 1 = hold
.br
\fIdatapoints\fP - the total number of data points in the fit.
.br
\fIydata[datapoints]\fP - an array containing the dependent variable (i.e. the data one is trying to fit).
.br
\fIxdata[numDataDims][datapoints]\fP - a 2D array containing the independent variables that correspond to each of the datapoints. One can fit multidimensional data, e.g. y = f(n, m). In this case numDataDims = 2. You can allocate a 2D dataset with m points using malloc2D(2, m, sizeof(double)). If you want to pass in a 1D dataset simply pass a pointer to the array. e.g. if your array is: double *xP; then pass in: &xP BUT YOU HAVE TO REMEMBER TO DEREFERENCE THE POINTER IN THE FIT FUNCTION BEFORE YOU USE THE ARRAY. model[ii] = (*xP)[ii]
.br
\fIedata[datapoints]\fP - an array containing the experimental uncertainties for each of the datapoints. If you use the default chi2 costfunction then it should contain standard deviations. Set each element to 1 if you do not wish to weight the fit by the experimental uncertainties.
.br
\fInumDataDims\fP - the number of independent variables in the fit. For y = f(x) numDataDims = 1. For y = f(n, m), numDataDims = 2, etc.
.br
\fIchi2\fP - the final value of the cost function.
.br
\fIgco\fP - options for the genetic optimisation. (see above). If gco == NULL, then a default set of options are used.
.br
\fIuserdata\fP - an (optional) pointer that is passed to the fitfunction, costfunction and updatefunction. Use this pointer to give extra information to your functions. 
.RE
.PP

.SS "int matrixInversion_lu (double ** a, int N)"LU matrix inversion 
.SS "void packAlphaSymmetric (double ** alpha, unsigned int numvarparams)"packs the upper right elements of the alpha matrix, because the alpha matrix should be symmetrical 
.SS "void updateAlpha (double ** alpha, double ** derivativeMatrix, unsigned int numvarparams, const double * edata, long datapoints, double lambda)"Calculates the lower left elements for \fCthis.alpha\fP. 
.SS "void updateBeta (double * b, double ** derivativeMatrix, int numvarparams, const double * ydata, const double * model, const double * edata, long datapoints)"Calculates all elements for \fCthis.beta\fP. 
.SH "Author"
.PP 
Generated automatically by Doxygen for libgencurvefit from the source code.
